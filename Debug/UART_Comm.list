
UART_Comm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003350  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080034d8  080034d8  000134d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034f8  080034f8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080034f8  080034f8  000134f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003500  08003500  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003500  08003500  00013500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003504  08003504  00013504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000314  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000324  20000324  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00008d47  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000019b1  00000000  00000000  00028dca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000718  00000000  00000000  0002a780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000055f  00000000  00000000  0002ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002026e  00000000  00000000  0002b3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a084  00000000  00000000  0004b665  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c1cb7  00000000  00000000  000556e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001b08  00000000  00000000  001173a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000055  00000000  00000000  00118ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080034c0 	.word	0x080034c0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080034c0 	.word	0x080034c0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <MX_DMA_Init+0x3c>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <MX_DMA_Init+0x3c>)
 80004d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
 80004da:	4b09      	ldr	r3, [pc, #36]	; (8000500 <MX_DMA_Init+0x3c>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80004e6:	2200      	movs	r2, #0
 80004e8:	2100      	movs	r1, #0
 80004ea:	2010      	movs	r0, #16
 80004ec:	f000 fcf1 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80004f0:	2010      	movs	r0, #16
 80004f2:	f000 fd0a 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	40023800 	.word	0x40023800

08000504 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	; 0x28
 8000508:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050a:	f107 0314 	add.w	r3, r7, #20
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
 8000512:	605a      	str	r2, [r3, #4]
 8000514:	609a      	str	r2, [r3, #8]
 8000516:	60da      	str	r2, [r3, #12]
 8000518:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800051a:	2300      	movs	r3, #0
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	4b2d      	ldr	r3, [pc, #180]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000522:	4a2c      	ldr	r2, [pc, #176]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000528:	6313      	str	r3, [r2, #48]	; 0x30
 800052a:	4b2a      	ldr	r3, [pc, #168]	; (80005d4 <MX_GPIO_Init+0xd0>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000532:	613b      	str	r3, [r7, #16]
 8000534:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	4b26      	ldr	r3, [pc, #152]	; (80005d4 <MX_GPIO_Init+0xd0>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a25      	ldr	r2, [pc, #148]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000540:	f043 0301 	orr.w	r3, r3, #1
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b23      	ldr	r3, [pc, #140]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0301 	and.w	r3, r3, #1
 800054e:	60fb      	str	r3, [r7, #12]
 8000550:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	4b1f      	ldr	r3, [pc, #124]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a1e      	ldr	r2, [pc, #120]	; (80005d4 <MX_GPIO_Init+0xd0>)
 800055c:	f043 0308 	orr.w	r3, r3, #8
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
 8000562:	4b1c      	ldr	r3, [pc, #112]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	f003 0308 	and.w	r3, r3, #8
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	2300      	movs	r3, #0
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	4b18      	ldr	r3, [pc, #96]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a17      	ldr	r2, [pc, #92]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000578:	f043 0304 	orr.w	r3, r3, #4
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <MX_GPIO_Init+0xd0>)
 8000580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000582:	f003 0304 	and.w	r3, r3, #4
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000590:	4811      	ldr	r0, [pc, #68]	; (80005d8 <MX_GPIO_Init+0xd4>)
 8000592:	f001 fa05 	bl	80019a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000596:	2301      	movs	r3, #1
 8000598:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059e:	2300      	movs	r3, #0
 80005a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005a2:	f107 0314 	add.w	r3, r7, #20
 80005a6:	4619      	mov	r1, r3
 80005a8:	480c      	ldr	r0, [pc, #48]	; (80005dc <MX_GPIO_Init+0xd8>)
 80005aa:	f001 f845 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin;
 80005ae:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80005b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005b4:	2301      	movs	r3, #1
 80005b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b8:	2300      	movs	r3, #0
 80005ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005bc:	2300      	movs	r3, #0
 80005be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80005c0:	f107 0314 	add.w	r3, r7, #20
 80005c4:	4619      	mov	r1, r3
 80005c6:	4804      	ldr	r0, [pc, #16]	; (80005d8 <MX_GPIO_Init+0xd4>)
 80005c8:	f001 f836 	bl	8001638 <HAL_GPIO_Init>

}
 80005cc:	bf00      	nop
 80005ce:	3728      	adds	r7, #40	; 0x28
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40020000 	.word	0x40020000

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e4:	f000 fb04 	bl	8000bf0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e8:	f000 f850 	bl	800068c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ec:	f7ff ff8a 	bl	8000504 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f0:	f7ff ff68 	bl	80004c4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005f4:	f000 f9be 	bl	8000974 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005f8:	f000 f9e6 	bl	80009c8 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Transmit(&huart2, txBuf, sizeof(txBuf), 1000);
  HAL_UART_Receive_IT(&huart2, rxRecBuf, 1);
 80005fc:	2201      	movs	r2, #1
 80005fe:	491b      	ldr	r1, [pc, #108]	; (800066c <main+0x8c>)
 8000600:	481b      	ldr	r0, [pc, #108]	; (8000670 <main+0x90>)
 8000602:	f001 ffa3 	bl	800254c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart6, rx6RecBuf, 1);
 8000606:	2201      	movs	r2, #1
 8000608:	491a      	ldr	r1, [pc, #104]	; (8000674 <main+0x94>)
 800060a:	481b      	ldr	r0, [pc, #108]	; (8000678 <main+0x98>)
 800060c:	f001 ff9e 	bl	800254c <HAL_UART_Receive_IT>
  HAL_UART_Transmit(&huart2, txHexData, sizeof(txHexData), 10);
 8000610:	230a      	movs	r3, #10
 8000612:	2203      	movs	r2, #3
 8000614:	4919      	ldr	r1, [pc, #100]	; (800067c <main+0x9c>)
 8000616:	4816      	ldr	r0, [pc, #88]	; (8000670 <main+0x90>)
 8000618:	f001 fec1 	bl	800239e <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, txHexData, sizeof(txHexData), 10);
 800061c:	230a      	movs	r3, #10
 800061e:	2203      	movs	r2, #3
 8000620:	4916      	ldr	r1, [pc, #88]	; (800067c <main+0x9c>)
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <main+0x90>)
 8000624:	f001 febb 	bl	800239e <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 8000628:	2101      	movs	r1, #1
 800062a:	4815      	ldr	r0, [pc, #84]	; (8000680 <main+0xa0>)
 800062c:	f001 f9a0 	bl	8001970 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b01      	cmp	r3, #1
 8000634:	d105      	bne.n	8000642 <main+0x62>
	  {
		  HAL_GPIO_WritePin(GPIOD, LED_Green_Pin|LED_Orange_Pin|LED_Red_Pin|LED_Blue_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800063c:	4811      	ldr	r0, [pc, #68]	; (8000684 <main+0xa4>)
 800063e:	f001 f9af 	bl	80019a0 <HAL_GPIO_WritePin>
	  }

	  ++txData;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <main+0xa8>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	3301      	adds	r3, #1
 8000648:	b2da      	uxtb	r2, r3
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <main+0xa8>)
 800064c:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit_IT(&huart2, &txData, 1);
 800064e:	2201      	movs	r2, #1
 8000650:	490d      	ldr	r1, [pc, #52]	; (8000688 <main+0xa8>)
 8000652:	4807      	ldr	r0, [pc, #28]	; (8000670 <main+0x90>)
 8000654:	f001 ff35 	bl	80024c2 <HAL_UART_Transmit_IT>
	  HAL_UART_Transmit_IT(&huart6, &txData, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	490b      	ldr	r1, [pc, #44]	; (8000688 <main+0xa8>)
 800065c:	4806      	ldr	r0, [pc, #24]	; (8000678 <main+0x98>)
 800065e:	f001 ff30 	bl	80024c2 <HAL_UART_Transmit_IT>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HAL_UART_Transmit(&huart2, txBuf, sizeof(txBuf), 100);
	  HAL_Delay(500);
 8000662:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000666:	f000 fb35 	bl	8000cd4 <HAL_Delay>
	  if(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin) == GPIO_PIN_SET)
 800066a:	e7dd      	b.n	8000628 <main+0x48>
 800066c:	2000002c 	.word	0x2000002c
 8000670:	20000238 	.word	0x20000238
 8000674:	20000030 	.word	0x20000030
 8000678:	2000027c 	.word	0x2000027c
 800067c:	20000000 	.word	0x20000000
 8000680:	40020000 	.word	0x40020000
 8000684:	40020c00 	.word	0x40020c00
 8000688:	20000234 	.word	0x20000234

0800068c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b094      	sub	sp, #80	; 0x50
 8000690:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000692:	f107 0320 	add.w	r3, r7, #32
 8000696:	2230      	movs	r2, #48	; 0x30
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f002 fee4 	bl	8003468 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a0:	f107 030c 	add.w	r3, r7, #12
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
 80006b4:	4b28      	ldr	r3, [pc, #160]	; (8000758 <SystemClock_Config+0xcc>)
 80006b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <SystemClock_Config+0xcc>)
 80006ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006be:	6413      	str	r3, [r2, #64]	; 0x40
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SystemClock_Config+0xcc>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006cc:	2300      	movs	r3, #0
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	4b22      	ldr	r3, [pc, #136]	; (800075c <SystemClock_Config+0xd0>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a21      	ldr	r2, [pc, #132]	; (800075c <SystemClock_Config+0xd0>)
 80006d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006da:	6013      	str	r3, [r2, #0]
 80006dc:	4b1f      	ldr	r3, [pc, #124]	; (800075c <SystemClock_Config+0xd0>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e4:	607b      	str	r3, [r7, #4]
 80006e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006e8:	2301      	movs	r3, #1
 80006ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f2:	2302      	movs	r3, #2
 80006f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006fc:	2304      	movs	r3, #4
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000700:	23a8      	movs	r3, #168	; 0xa8
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000708:	2304      	movs	r3, #4
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4618      	mov	r0, r3
 8000712:	f001 f95f 	bl	80019d4 <HAL_RCC_OscConfig>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800071c:	f000 f8a2 	bl	8000864 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000720:	230f      	movs	r3, #15
 8000722:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000724:	2302      	movs	r3, #2
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000730:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000736:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2105      	movs	r1, #5
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fbc0 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800074a:	f000 f88b 	bl	8000864 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40007000 	.word	0x40007000

08000760 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){

	}

}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr

08000774 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]

	if(huart->Instance == USART2){
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a2d      	ldr	r2, [pc, #180]	; (8000838 <HAL_UART_RxCpltCallback+0xc4>)
 8000782:	4293      	cmp	r3, r2
 8000784:	d13c      	bne.n	8000800 <HAL_UART_RxCpltCallback+0x8c>

		rxTempBuf[++rxTempBufIndex] = rxRecBuf[0];
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <HAL_UART_RxCpltCallback+0xc8>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b2b      	ldr	r3, [pc, #172]	; (800083c <HAL_UART_RxCpltCallback+0xc8>)
 8000790:	701a      	strb	r2, [r3, #0]
 8000792:	4b2a      	ldr	r3, [pc, #168]	; (800083c <HAL_UART_RxCpltCallback+0xc8>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	4b29      	ldr	r3, [pc, #164]	; (8000840 <HAL_UART_RxCpltCallback+0xcc>)
 800079a:	7819      	ldrb	r1, [r3, #0]
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <HAL_UART_RxCpltCallback+0xd0>)
 800079e:	5499      	strb	r1, [r3, r2]
		HAL_UART_Receive_IT(&huart2, rxRecBuf, 1);
 80007a0:	2201      	movs	r2, #1
 80007a2:	4927      	ldr	r1, [pc, #156]	; (8000840 <HAL_UART_RxCpltCallback+0xcc>)
 80007a4:	4828      	ldr	r0, [pc, #160]	; (8000848 <HAL_UART_RxCpltCallback+0xd4>)
 80007a6:	f001 fed1 	bl	800254c <HAL_UART_Receive_IT>

		if(rxRecBuf[0] == 111){
 80007aa:	4b25      	ldr	r3, [pc, #148]	; (8000840 <HAL_UART_RxCpltCallback+0xcc>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b6f      	cmp	r3, #111	; 0x6f
 80007b0:	d106      	bne.n	80007c0 <HAL_UART_RxCpltCallback+0x4c>
			HAL_GPIO_WritePin(LED_Orange_GPIO_Port, LED_Orange_Pin, GPIO_PIN_SET);
 80007b2:	2201      	movs	r2, #1
 80007b4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b8:	4824      	ldr	r0, [pc, #144]	; (800084c <HAL_UART_RxCpltCallback+0xd8>)
 80007ba:	f001 f8f1 	bl	80019a0 <HAL_GPIO_WritePin>
 80007be:	e01f      	b.n	8000800 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if(rxRecBuf[0] == 114){
 80007c0:	4b1f      	ldr	r3, [pc, #124]	; (8000840 <HAL_UART_RxCpltCallback+0xcc>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b72      	cmp	r3, #114	; 0x72
 80007c6:	d106      	bne.n	80007d6 <HAL_UART_RxCpltCallback+0x62>
			HAL_GPIO_WritePin(LED_Red_GPIO_Port, LED_Red_Pin, GPIO_PIN_SET);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	481f      	ldr	r0, [pc, #124]	; (800084c <HAL_UART_RxCpltCallback+0xd8>)
 80007d0:	f001 f8e6 	bl	80019a0 <HAL_GPIO_WritePin>
 80007d4:	e014      	b.n	8000800 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if(rxRecBuf[0] == 103){
 80007d6:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <HAL_UART_RxCpltCallback+0xcc>)
 80007d8:	781b      	ldrb	r3, [r3, #0]
 80007da:	2b67      	cmp	r3, #103	; 0x67
 80007dc:	d106      	bne.n	80007ec <HAL_UART_RxCpltCallback+0x78>
			HAL_GPIO_WritePin(LED_Green_GPIO_Port, LED_Green_Pin, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007e4:	4819      	ldr	r0, [pc, #100]	; (800084c <HAL_UART_RxCpltCallback+0xd8>)
 80007e6:	f001 f8db 	bl	80019a0 <HAL_GPIO_WritePin>
 80007ea:	e009      	b.n	8000800 <HAL_UART_RxCpltCallback+0x8c>
		}
		else if(rxRecBuf[0] == 98){
 80007ec:	4b14      	ldr	r3, [pc, #80]	; (8000840 <HAL_UART_RxCpltCallback+0xcc>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b62      	cmp	r3, #98	; 0x62
 80007f2:	d105      	bne.n	8000800 <HAL_UART_RxCpltCallback+0x8c>
			HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007fa:	4814      	ldr	r0, [pc, #80]	; (800084c <HAL_UART_RxCpltCallback+0xd8>)
 80007fc:	f001 f8d0 	bl	80019a0 <HAL_GPIO_WritePin>
		}

	}

	if(huart->Instance == USART6){
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a12      	ldr	r2, [pc, #72]	; (8000850 <HAL_UART_RxCpltCallback+0xdc>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d111      	bne.n	800082e <HAL_UART_RxCpltCallback+0xba>

			rx6TempBuf[++rx6TempBufIndex] = rx6RecBuf[0];
 800080a:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_UART_RxCpltCallback+0xe0>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	3301      	adds	r3, #1
 8000810:	b2da      	uxtb	r2, r3
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <HAL_UART_RxCpltCallback+0xe0>)
 8000814:	701a      	strb	r2, [r3, #0]
 8000816:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <HAL_UART_RxCpltCallback+0xe0>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_UART_RxCpltCallback+0xe4>)
 800081e:	7819      	ldrb	r1, [r3, #0]
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <HAL_UART_RxCpltCallback+0xe8>)
 8000822:	5499      	strb	r1, [r3, r2]
			HAL_UART_Receive_IT(&huart6, rx6RecBuf, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	490c      	ldr	r1, [pc, #48]	; (8000858 <HAL_UART_RxCpltCallback+0xe4>)
 8000828:	480d      	ldr	r0, [pc, #52]	; (8000860 <HAL_UART_RxCpltCallback+0xec>)
 800082a:	f001 fe8f 	bl	800254c <HAL_UART_Receive_IT>

		}


}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40004400 	.word	0x40004400
 800083c:	20000133 	.word	0x20000133
 8000840:	2000002c 	.word	0x2000002c
 8000844:	20000034 	.word	0x20000034
 8000848:	20000238 	.word	0x20000238
 800084c:	40020c00 	.word	0x40020c00
 8000850:	40011400 	.word	0x40011400
 8000854:	20000233 	.word	0x20000233
 8000858:	20000030 	.word	0x20000030
 800085c:	20000134 	.word	0x20000134
 8000860:	2000027c 	.word	0x2000027c

08000864 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000868:	b672      	cpsid	i
}
 800086a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800086c:	e7fe      	b.n	800086c <Error_Handler+0x8>
	...

08000870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b10      	ldr	r3, [pc, #64]	; (80008bc <HAL_MspInit+0x4c>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a0f      	ldr	r2, [pc, #60]	; (80008bc <HAL_MspInit+0x4c>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b0d      	ldr	r3, [pc, #52]	; (80008bc <HAL_MspInit+0x4c>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000892:	2300      	movs	r3, #0
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	4b09      	ldr	r3, [pc, #36]	; (80008bc <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	4a08      	ldr	r2, [pc, #32]	; (80008bc <HAL_MspInit+0x4c>)
 800089c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a0:	6413      	str	r3, [r2, #64]	; 0x40
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_MspInit+0x4c>)
 80008a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	40023800 	.word	0x40023800

080008c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <NMI_Handler+0x4>

080008c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <HardFault_Handler+0x4>

080008cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <MemManage_Handler+0x4>

080008d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d6:	e7fe      	b.n	80008d6 <BusFault_Handler+0x4>

080008d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <UsageFault_Handler+0x4>

080008de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800090c:	f000 f9c2 	bl	8000c94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}

08000914 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000918:	4802      	ldr	r0, [pc, #8]	; (8000924 <DMA1_Stream5_IRQHandler+0x10>)
 800091a:	f000 fc51 	bl	80011c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200002c0 	.word	0x200002c0

08000928 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <USART2_IRQHandler+0x10>)
 800092e:	f001 fe3d 	bl	80025ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000238 	.word	0x20000238

0800093c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8000940:	4802      	ldr	r0, [pc, #8]	; (800094c <USART6_IRQHandler+0x10>)
 8000942:	f001 fe33 	bl	80025ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000027c 	.word	0x2000027c

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	; (80009c4 <MX_USART2_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800097e:	4b10      	ldr	r3, [pc, #64]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000980:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009aa:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ac:	4804      	ldr	r0, [pc, #16]	; (80009c0 <MX_USART2_UART_Init+0x4c>)
 80009ae:	f001 fca9 	bl	8002304 <HAL_UART_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 80009b8:	f7ff ff54 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009bc:	bf00      	nop
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	20000238 	.word	0x20000238
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80009cc:	4b11      	ldr	r3, [pc, #68]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009ce:	4a12      	ldr	r2, [pc, #72]	; (8000a18 <MX_USART6_UART_Init+0x50>)
 80009d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80009d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80009da:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80009e0:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80009ec:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009ee:	220c      	movs	r2, #12
 80009f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009f2:	4b08      	ldr	r3, [pc, #32]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <MX_USART6_UART_Init+0x4c>)
 8000a00:	f001 fc80 	bl	8002304 <HAL_UART_Init>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000a0a:	f7ff ff2b 	bl	8000864 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	2000027c 	.word	0x2000027c
 8000a18:	40011400 	.word	0x40011400

08000a1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08c      	sub	sp, #48	; 0x30
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a51      	ldr	r2, [pc, #324]	; (8000b80 <HAL_UART_MspInit+0x164>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d163      	bne.n	8000b06 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61bb      	str	r3, [r7, #24]
 8000a42:	4b50      	ldr	r3, [pc, #320]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a46:	4a4f      	ldr	r2, [pc, #316]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4e:	4b4d      	ldr	r3, [pc, #308]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a56:	61bb      	str	r3, [r7, #24]
 8000a58:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	4b49      	ldr	r3, [pc, #292]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6313      	str	r3, [r2, #48]	; 0x30
 8000a6a:	4b46      	ldr	r3, [pc, #280]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a76:	230c      	movs	r3, #12
 8000a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a82:	2303      	movs	r3, #3
 8000a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a86:	2307      	movs	r3, #7
 8000a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8a:	f107 031c 	add.w	r3, r7, #28
 8000a8e:	4619      	mov	r1, r3
 8000a90:	483d      	ldr	r0, [pc, #244]	; (8000b88 <HAL_UART_MspInit+0x16c>)
 8000a92:	f000 fdd1 	bl	8001638 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8000a96:	4b3d      	ldr	r3, [pc, #244]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000a98:	4a3d      	ldr	r2, [pc, #244]	; (8000b90 <HAL_UART_MspInit+0x174>)
 8000a9a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8000a9c:	4b3b      	ldr	r3, [pc, #236]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000a9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aa2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000aa4:	4b39      	ldr	r3, [pc, #228]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000aaa:	4b38      	ldr	r3, [pc, #224]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ab0:	4b36      	ldr	r3, [pc, #216]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000ab2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ab6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ab8:	4b34      	ldr	r3, [pc, #208]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000abe:	4b33      	ldr	r3, [pc, #204]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000ac4:	4b31      	ldr	r3, [pc, #196]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000aca:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000acc:	4b2f      	ldr	r3, [pc, #188]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000ad8:	482c      	ldr	r0, [pc, #176]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000ada:	f000 fa31 	bl	8000f40 <HAL_DMA_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000ae4:	f7ff febe 	bl	8000864 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a28      	ldr	r2, [pc, #160]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000aec:	639a      	str	r2, [r3, #56]	; 0x38
 8000aee:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <HAL_UART_MspInit+0x170>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2100      	movs	r1, #0
 8000af8:	2026      	movs	r0, #38	; 0x26
 8000afa:	f000 f9ea 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000afe:	2026      	movs	r0, #38	; 0x26
 8000b00:	f000 fa03 	bl	8000f0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8000b04:	e038      	b.n	8000b78 <HAL_UART_MspInit+0x15c>
  else if(uartHandle->Instance==USART6)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <HAL_UART_MspInit+0x178>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d133      	bne.n	8000b78 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	4b1b      	ldr	r3, [pc, #108]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000b1a:	f043 0320 	orr.w	r3, r3, #32
 8000b1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b20:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b24:	f003 0320 	and.w	r3, r3, #32
 8000b28:	613b      	str	r3, [r7, #16]
 8000b2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	4b14      	ldr	r3, [pc, #80]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	4a13      	ldr	r2, [pc, #76]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3c:	4b11      	ldr	r3, [pc, #68]	; (8000b84 <HAL_UART_MspInit+0x168>)
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	f003 0304 	and.w	r3, r3, #4
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b48:	23c0      	movs	r3, #192	; 0xc0
 8000b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b54:	2303      	movs	r3, #3
 8000b56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5c:	f107 031c 	add.w	r3, r7, #28
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <HAL_UART_MspInit+0x17c>)
 8000b64:	f000 fd68 	bl	8001638 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2047      	movs	r0, #71	; 0x47
 8000b6e:	f000 f9b0 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8000b72:	2047      	movs	r0, #71	; 0x47
 8000b74:	f000 f9c9 	bl	8000f0a <HAL_NVIC_EnableIRQ>
}
 8000b78:	bf00      	nop
 8000b7a:	3730      	adds	r7, #48	; 0x30
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40004400 	.word	0x40004400
 8000b84:	40023800 	.word	0x40023800
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	200002c0 	.word	0x200002c0
 8000b90:	40026088 	.word	0x40026088
 8000b94:	40011400 	.word	0x40011400
 8000b98:	40020800 	.word	0x40020800

08000b9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ba2:	490e      	ldr	r1, [pc, #56]	; (8000bdc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ba4:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba8:	e002      	b.n	8000bb0 <LoopCopyDataInit>

08000baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bae:	3304      	adds	r3, #4

08000bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bb4:	d3f9      	bcc.n	8000baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bb6:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bb8:	4c0b      	ldr	r4, [pc, #44]	; (8000be8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bbc:	e001      	b.n	8000bc2 <LoopFillZerobss>

08000bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc0:	3204      	adds	r2, #4

08000bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bc4:	d3fb      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bc6:	f7ff fec3 	bl	8000950 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bca:	f002 fc55 	bl	8003478 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bce:	f7ff fd07 	bl	80005e0 <main>
  bx  lr    
 8000bd2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000bd4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bd8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bdc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000be0:	08003508 	.word	0x08003508
  ldr r2, =_sbss
 8000be4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000be8:	20000324 	.word	0x20000324

08000bec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bec:	e7fe      	b.n	8000bec <ADC_IRQHandler>
	...

08000bf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	; (8000c30 <HAL_Init+0x40>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	; (8000c30 <HAL_Init+0x40>)
 8000bfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c00:	4b0b      	ldr	r3, [pc, #44]	; (8000c30 <HAL_Init+0x40>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a0a      	ldr	r2, [pc, #40]	; (8000c30 <HAL_Init+0x40>)
 8000c06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c0c:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_Init+0x40>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a07      	ldr	r2, [pc, #28]	; (8000c30 <HAL_Init+0x40>)
 8000c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c18:	2003      	movs	r0, #3
 8000c1a:	f000 f94f 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c1e:	200f      	movs	r0, #15
 8000c20:	f000 f808 	bl	8000c34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c24:	f7ff fe24 	bl	8000870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40023c00 	.word	0x40023c00

08000c34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x54>)
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x58>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	4619      	mov	r1, r3
 8000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f967 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00e      	b.n	8000c80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b0f      	cmp	r3, #15
 8000c66:	d80a      	bhi.n	8000c7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 f92f 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_InitTick+0x5c>)
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e000      	b.n	8000c80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3708      	adds	r7, #8
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	20000004 	.word	0x20000004
 8000c8c:	2000000c 	.word	0x2000000c
 8000c90:	20000008 	.word	0x20000008

08000c94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x20>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <HAL_IncTick+0x24>)
 8000ca6:	6013      	str	r3, [r2, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	20000320 	.word	0x20000320

08000cbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc0:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <HAL_GetTick+0x14>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	20000320 	.word	0x20000320

08000cd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cdc:	f7ff ffee 	bl	8000cbc <HAL_GetTick>
 8000ce0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000cec:	d005      	beq.n	8000cfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cee:	4b0a      	ldr	r3, [pc, #40]	; (8000d18 <HAL_Delay+0x44>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfa:	bf00      	nop
 8000cfc:	f7ff ffde 	bl	8000cbc <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d8f7      	bhi.n	8000cfc <HAL_Delay+0x28>
  {
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bf00      	nop
 8000d10:	3710      	adds	r7, #16
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	2000000c 	.word	0x2000000c

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff feb6 	bl	8000cbc <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e099      	b.n	8001090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	e00f      	b.n	8000f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7e:	f7ff fe9d 	bl	8000cbc <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d908      	bls.n	8000f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e078      	b.n	8001090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e8      	bne.n	8000f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_DMA_Init+0x158>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4313      	orrs	r3, r2
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f023 0307 	bic.w	r3, r3, #7
 800101e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4313      	orrs	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	2b04      	cmp	r3, #4
 8001030:	d117      	bne.n	8001062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00e      	beq.n	8001062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fa7b 	bl	8001540 <DMA_CheckFifoParam>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800105e:	2301      	movs	r3, #1
 8001060:	e016      	b.n	8001090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fa32 	bl	80014d4 <DMA_CalcBaseAndBitshift>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	223f      	movs	r2, #63	; 0x3f
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	f010803f 	.word	0xf010803f

0800109c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010aa:	f7ff fe07 	bl	8000cbc <HAL_GetTick>
 80010ae:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d008      	beq.n	80010ce <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2280      	movs	r2, #128	; 0x80
 80010c0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e052      	b.n	8001174 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0216 	bic.w	r2, r2, #22
 80010dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	695a      	ldr	r2, [r3, #20]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80010ec:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d103      	bne.n	80010fe <HAL_DMA_Abort+0x62>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d007      	beq.n	800110e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f022 0208 	bic.w	r2, r2, #8
 800110c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 0201 	bic.w	r2, r2, #1
 800111c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800111e:	e013      	b.n	8001148 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001120:	f7ff fdcc 	bl	8000cbc <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b05      	cmp	r3, #5
 800112c:	d90c      	bls.n	8001148 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2220      	movs	r2, #32
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2203      	movs	r2, #3
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001144:	2303      	movs	r3, #3
 8001146:	e015      	b.n	8001174 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d1e4      	bne.n	8001120 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800115a:	223f      	movs	r2, #63	; 0x3f
 800115c:	409a      	lsls	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001172:	2300      	movs	r3, #0
}
 8001174:	4618      	mov	r0, r3
 8001176:	3710      	adds	r7, #16
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2b02      	cmp	r3, #2
 800118e:	d004      	beq.n	800119a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e00c      	b.n	80011b4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2205      	movs	r2, #5
 800119e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f022 0201 	bic.w	r2, r2, #1
 80011b0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011b2:	2300      	movs	r3, #0
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80011cc:	4b8e      	ldr	r3, [pc, #568]	; (8001408 <HAL_DMA_IRQHandler+0x248>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a8e      	ldr	r2, [pc, #568]	; (800140c <HAL_DMA_IRQHandler+0x24c>)
 80011d2:	fba2 2303 	umull	r2, r3, r2, r3
 80011d6:	0a9b      	lsrs	r3, r3, #10
 80011d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ea:	2208      	movs	r2, #8
 80011ec:	409a      	lsls	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d01a      	beq.n	800122c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	681a      	ldr	r2, [r3, #0]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f022 0204 	bic.w	r2, r2, #4
 8001212:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001218:	2208      	movs	r2, #8
 800121a:	409a      	lsls	r2, r3
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001224:	f043 0201 	orr.w	r2, r3, #1
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001230:	2201      	movs	r2, #1
 8001232:	409a      	lsls	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d012      	beq.n	8001262 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800124e:	2201      	movs	r2, #1
 8001250:	409a      	lsls	r2, r3
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125a:	f043 0202 	orr.w	r2, r3, #2
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001266:	2204      	movs	r2, #4
 8001268:	409a      	lsls	r2, r3
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4013      	ands	r3, r2
 800126e:	2b00      	cmp	r3, #0
 8001270:	d012      	beq.n	8001298 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 0302 	and.w	r3, r3, #2
 800127c:	2b00      	cmp	r3, #0
 800127e:	d00b      	beq.n	8001298 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001284:	2204      	movs	r2, #4
 8001286:	409a      	lsls	r2, r3
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001290:	f043 0204 	orr.w	r2, r3, #4
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129c:	2210      	movs	r2, #16
 800129e:	409a      	lsls	r2, r3
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d043      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0308 	and.w	r3, r3, #8
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d03c      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ba:	2210      	movs	r2, #16
 80012bc:	409a      	lsls	r2, r3
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d018      	beq.n	8001302 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d108      	bne.n	80012f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d024      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	4798      	blx	r3
 80012ee:	e01f      	b.n	8001330 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d01b      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	4798      	blx	r3
 8001300:	e016      	b.n	8001330 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d107      	bne.n	8001320 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f022 0208 	bic.w	r2, r2, #8
 800131e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001324:	2b00      	cmp	r3, #0
 8001326:	d003      	beq.n	8001330 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2220      	movs	r2, #32
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	f000 808f 	beq.w	8001460 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0310 	and.w	r3, r3, #16
 800134c:	2b00      	cmp	r3, #0
 800134e:	f000 8087 	beq.w	8001460 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001356:	2220      	movs	r2, #32
 8001358:	409a      	lsls	r2, r3
 800135a:	693b      	ldr	r3, [r7, #16]
 800135c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b05      	cmp	r3, #5
 8001368:	d136      	bne.n	80013d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f022 0216 	bic.w	r2, r2, #22
 8001378:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	695a      	ldr	r2, [r3, #20]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001388:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	2b00      	cmp	r3, #0
 8001390:	d103      	bne.n	800139a <HAL_DMA_IRQHandler+0x1da>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001396:	2b00      	cmp	r3, #0
 8001398:	d007      	beq.n	80013aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0208 	bic.w	r2, r2, #8
 80013a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ae:	223f      	movs	r2, #63	; 0x3f
 80013b0:	409a      	lsls	r2, r3
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2201      	movs	r2, #1
 80013ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d07e      	beq.n	80014cc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	4798      	blx	r3
        }
        return;
 80013d6:	e079      	b.n	80014cc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d01d      	beq.n	8001422 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d10d      	bne.n	8001410 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d031      	beq.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	4798      	blx	r3
 8001404:	e02c      	b.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
 8001406:	bf00      	nop
 8001408:	20000004 	.word	0x20000004
 800140c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d023      	beq.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	4798      	blx	r3
 8001420:	e01e      	b.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800142c:	2b00      	cmp	r3, #0
 800142e:	d10f      	bne.n	8001450 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0210 	bic.w	r2, r2, #16
 800143e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001454:	2b00      	cmp	r3, #0
 8001456:	d003      	beq.n	8001460 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001464:	2b00      	cmp	r3, #0
 8001466:	d032      	beq.n	80014ce <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	2b00      	cmp	r3, #0
 8001472:	d022      	beq.n	80014ba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2205      	movs	r2, #5
 8001478:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0201 	bic.w	r2, r2, #1
 800148a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	3301      	adds	r3, #1
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	429a      	cmp	r2, r3
 8001496:	d307      	bcc.n	80014a8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d1f2      	bne.n	800148c <HAL_DMA_IRQHandler+0x2cc>
 80014a6:	e000      	b.n	80014aa <HAL_DMA_IRQHandler+0x2ea>
          break;
 80014a8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2201      	movs	r2, #1
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2200      	movs	r2, #0
 80014b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	4798      	blx	r3
 80014ca:	e000      	b.n	80014ce <HAL_DMA_IRQHandler+0x30e>
        return;
 80014cc:	bf00      	nop
    }
  }
}
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	3b10      	subs	r3, #16
 80014e4:	4a14      	ldr	r2, [pc, #80]	; (8001538 <DMA_CalcBaseAndBitshift+0x64>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80014ee:	4a13      	ldr	r2, [pc, #76]	; (800153c <DMA_CalcBaseAndBitshift+0x68>)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	4413      	add	r3, r2
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	461a      	mov	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	2b03      	cmp	r3, #3
 8001500:	d909      	bls.n	8001516 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800150a:	f023 0303 	bic.w	r3, r3, #3
 800150e:	1d1a      	adds	r2, r3, #4
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	659a      	str	r2, [r3, #88]	; 0x58
 8001514:	e007      	b.n	8001526 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800151e:	f023 0303 	bic.w	r3, r3, #3
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800152a:	4618      	mov	r0, r3
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	aaaaaaab 	.word	0xaaaaaaab
 800153c:	080034f0 	.word	0x080034f0

08001540 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001550:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d11f      	bne.n	800159a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b03      	cmp	r3, #3
 800155e:	d856      	bhi.n	800160e <DMA_CheckFifoParam+0xce>
 8001560:	a201      	add	r2, pc, #4	; (adr r2, 8001568 <DMA_CheckFifoParam+0x28>)
 8001562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001566:	bf00      	nop
 8001568:	08001579 	.word	0x08001579
 800156c:	0800158b 	.word	0x0800158b
 8001570:	08001579 	.word	0x08001579
 8001574:	0800160f 	.word	0x0800160f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d046      	beq.n	8001612 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001588:	e043      	b.n	8001612 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001592:	d140      	bne.n	8001616 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001598:	e03d      	b.n	8001616 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015a2:	d121      	bne.n	80015e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d837      	bhi.n	800161a <DMA_CheckFifoParam+0xda>
 80015aa:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <DMA_CheckFifoParam+0x70>)
 80015ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b0:	080015c1 	.word	0x080015c1
 80015b4:	080015c7 	.word	0x080015c7
 80015b8:	080015c1 	.word	0x080015c1
 80015bc:	080015d9 	.word	0x080015d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
      break;
 80015c4:	e030      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d025      	beq.n	800161e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80015d6:	e022      	b.n	800161e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80015e0:	d11f      	bne.n	8001622 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80015e6:	e01c      	b.n	8001622 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d903      	bls.n	80015f6 <DMA_CheckFifoParam+0xb6>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	d003      	beq.n	80015fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80015f4:	e018      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	73fb      	strb	r3, [r7, #15]
      break;
 80015fa:	e015      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001600:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d00e      	beq.n	8001626 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	73fb      	strb	r3, [r7, #15]
      break;
 800160c:	e00b      	b.n	8001626 <DMA_CheckFifoParam+0xe6>
      break;
 800160e:	bf00      	nop
 8001610:	e00a      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      break;
 8001612:	bf00      	nop
 8001614:	e008      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      break;
 8001616:	bf00      	nop
 8001618:	e006      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      break;
 800161a:	bf00      	nop
 800161c:	e004      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      break;
 800161e:	bf00      	nop
 8001620:	e002      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      break;   
 8001622:	bf00      	nop
 8001624:	e000      	b.n	8001628 <DMA_CheckFifoParam+0xe8>
      break;
 8001626:	bf00      	nop
    }
  } 
  
  return status; 
 8001628:	7bfb      	ldrb	r3, [r7, #15]
}
 800162a:	4618      	mov	r0, r3
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	; 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800164a:	2300      	movs	r3, #0
 800164c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	2300      	movs	r3, #0
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	e16b      	b.n	800192c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001654:	2201      	movs	r2, #1
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	697a      	ldr	r2, [r7, #20]
 8001664:	4013      	ands	r3, r2
 8001666:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	429a      	cmp	r2, r3
 800166e:	f040 815a 	bne.w	8001926 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b01      	cmp	r3, #1
 800167c:	d005      	beq.n	800168a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001686:	2b02      	cmp	r3, #2
 8001688:	d130      	bne.n	80016ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	2203      	movs	r2, #3
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016c0:	2201      	movs	r2, #1
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	69ba      	ldr	r2, [r7, #24]
 80016cc:	4013      	ands	r3, r2
 80016ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	091b      	lsrs	r3, r3, #4
 80016d6:	f003 0201 	and.w	r2, r3, #1
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b03      	cmp	r3, #3
 80016f6:	d017      	beq.n	8001728 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	69ba      	ldr	r2, [r7, #24]
 800170c:	4013      	ands	r3, r2
 800170e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	4313      	orrs	r3, r2
 8001720:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f003 0303 	and.w	r3, r3, #3
 8001730:	2b02      	cmp	r3, #2
 8001732:	d123      	bne.n	800177c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	08da      	lsrs	r2, r3, #3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3208      	adds	r2, #8
 800173c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	220f      	movs	r2, #15
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43db      	mvns	r3, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4013      	ands	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	691a      	ldr	r2, [r3, #16]
 800175c:	69fb      	ldr	r3, [r7, #28]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	08da      	lsrs	r2, r3, #3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	3208      	adds	r2, #8
 8001776:	69b9      	ldr	r1, [r7, #24]
 8001778:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	2203      	movs	r2, #3
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0203 	and.w	r2, r3, #3
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	fa02 f303 	lsl.w	r3, r2, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 80b4 	beq.w	8001926 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	4b60      	ldr	r3, [pc, #384]	; (8001944 <HAL_GPIO_Init+0x30c>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a5f      	ldr	r2, [pc, #380]	; (8001944 <HAL_GPIO_Init+0x30c>)
 80017c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <HAL_GPIO_Init+0x30c>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017da:	4a5b      	ldr	r2, [pc, #364]	; (8001948 <HAL_GPIO_Init+0x310>)
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	089b      	lsrs	r3, r3, #2
 80017e0:	3302      	adds	r3, #2
 80017e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	009b      	lsls	r3, r3, #2
 80017f0:	220f      	movs	r2, #15
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a52      	ldr	r2, [pc, #328]	; (800194c <HAL_GPIO_Init+0x314>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d02b      	beq.n	800185e <HAL_GPIO_Init+0x226>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4a51      	ldr	r2, [pc, #324]	; (8001950 <HAL_GPIO_Init+0x318>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d025      	beq.n	800185a <HAL_GPIO_Init+0x222>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a50      	ldr	r2, [pc, #320]	; (8001954 <HAL_GPIO_Init+0x31c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d01f      	beq.n	8001856 <HAL_GPIO_Init+0x21e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4f      	ldr	r2, [pc, #316]	; (8001958 <HAL_GPIO_Init+0x320>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d019      	beq.n	8001852 <HAL_GPIO_Init+0x21a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4e      	ldr	r2, [pc, #312]	; (800195c <HAL_GPIO_Init+0x324>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d013      	beq.n	800184e <HAL_GPIO_Init+0x216>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4d      	ldr	r2, [pc, #308]	; (8001960 <HAL_GPIO_Init+0x328>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d00d      	beq.n	800184a <HAL_GPIO_Init+0x212>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4c      	ldr	r2, [pc, #304]	; (8001964 <HAL_GPIO_Init+0x32c>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d007      	beq.n	8001846 <HAL_GPIO_Init+0x20e>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4b      	ldr	r2, [pc, #300]	; (8001968 <HAL_GPIO_Init+0x330>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d101      	bne.n	8001842 <HAL_GPIO_Init+0x20a>
 800183e:	2307      	movs	r3, #7
 8001840:	e00e      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001842:	2308      	movs	r3, #8
 8001844:	e00c      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001846:	2306      	movs	r3, #6
 8001848:	e00a      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800184a:	2305      	movs	r3, #5
 800184c:	e008      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800184e:	2304      	movs	r3, #4
 8001850:	e006      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001852:	2303      	movs	r3, #3
 8001854:	e004      	b.n	8001860 <HAL_GPIO_Init+0x228>
 8001856:	2302      	movs	r3, #2
 8001858:	e002      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800185a:	2301      	movs	r3, #1
 800185c:	e000      	b.n	8001860 <HAL_GPIO_Init+0x228>
 800185e:	2300      	movs	r3, #0
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	f002 0203 	and.w	r2, r2, #3
 8001866:	0092      	lsls	r2, r2, #2
 8001868:	4093      	lsls	r3, r2
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4313      	orrs	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001870:	4935      	ldr	r1, [pc, #212]	; (8001948 <HAL_GPIO_Init+0x310>)
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800187e:	4b3b      	ldr	r3, [pc, #236]	; (800196c <HAL_GPIO_Init+0x334>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	43db      	mvns	r3, r3
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	4013      	ands	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d003      	beq.n	80018a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	4313      	orrs	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a2:	4a32      	ldr	r2, [pc, #200]	; (800196c <HAL_GPIO_Init+0x334>)
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018a8:	4b30      	ldr	r3, [pc, #192]	; (800196c <HAL_GPIO_Init+0x334>)
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	43db      	mvns	r3, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4013      	ands	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d003      	beq.n	80018cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018cc:	4a27      	ldr	r2, [pc, #156]	; (800196c <HAL_GPIO_Init+0x334>)
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <HAL_GPIO_Init+0x334>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	43db      	mvns	r3, r3
 80018dc:	69ba      	ldr	r2, [r7, #24]
 80018de:	4013      	ands	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d003      	beq.n	80018f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018f6:	4a1d      	ldr	r2, [pc, #116]	; (800196c <HAL_GPIO_Init+0x334>)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <HAL_GPIO_Init+0x334>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	43db      	mvns	r3, r3
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	4013      	ands	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d003      	beq.n	8001920 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001918:	69ba      	ldr	r2, [r7, #24]
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001920:	4a12      	ldr	r2, [pc, #72]	; (800196c <HAL_GPIO_Init+0x334>)
 8001922:	69bb      	ldr	r3, [r7, #24]
 8001924:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	61fb      	str	r3, [r7, #28]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	2b0f      	cmp	r3, #15
 8001930:	f67f ae90 	bls.w	8001654 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	3724      	adds	r7, #36	; 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	40023800 	.word	0x40023800
 8001948:	40013800 	.word	0x40013800
 800194c:	40020000 	.word	0x40020000
 8001950:	40020400 	.word	0x40020400
 8001954:	40020800 	.word	0x40020800
 8001958:	40020c00 	.word	0x40020c00
 800195c:	40021000 	.word	0x40021000
 8001960:	40021400 	.word	0x40021400
 8001964:	40021800 	.word	0x40021800
 8001968:	40021c00 	.word	0x40021c00
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691a      	ldr	r2, [r3, #16]
 8001980:	887b      	ldrh	r3, [r7, #2]
 8001982:	4013      	ands	r3, r2
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
 800198c:	e001      	b.n	8001992 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3714      	adds	r7, #20
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr

080019a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	460b      	mov	r3, r1
 80019aa:	807b      	strh	r3, [r7, #2]
 80019ac:	4613      	mov	r3, r2
 80019ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b0:	787b      	ldrb	r3, [r7, #1]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019b6:	887a      	ldrh	r2, [r7, #2]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019bc:	e003      	b.n	80019c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019be:	887b      	ldrh	r3, [r7, #2]
 80019c0:	041a      	lsls	r2, r3, #16
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	619a      	str	r2, [r3, #24]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
	...

080019d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b086      	sub	sp, #24
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d101      	bne.n	80019e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e267      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d075      	beq.n	8001ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80019f2:	4b88      	ldr	r3, [pc, #544]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	f003 030c 	and.w	r3, r3, #12
 80019fa:	2b04      	cmp	r3, #4
 80019fc:	d00c      	beq.n	8001a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019fe:	4b85      	ldr	r3, [pc, #532]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d112      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0a:	4b82      	ldr	r3, [pc, #520]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a16:	d10b      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	4b7e      	ldr	r3, [pc, #504]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d05b      	beq.n	8001adc <HAL_RCC_OscConfig+0x108>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d157      	bne.n	8001adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e242      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a38:	d106      	bne.n	8001a48 <HAL_RCC_OscConfig+0x74>
 8001a3a:	4b76      	ldr	r3, [pc, #472]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a44:	6013      	str	r3, [r2, #0]
 8001a46:	e01d      	b.n	8001a84 <HAL_RCC_OscConfig+0xb0>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x98>
 8001a52:	4b70      	ldr	r3, [pc, #448]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a6f      	ldr	r2, [pc, #444]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a5c:	6013      	str	r3, [r2, #0]
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a6c      	ldr	r2, [pc, #432]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0xb0>
 8001a6c:	4b69      	ldr	r3, [pc, #420]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a68      	ldr	r2, [pc, #416]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	4b66      	ldr	r3, [pc, #408]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d013      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f916 	bl	8000cbc <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f912 	bl	8000cbc <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e207      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0xc0>
 8001ab2:	e014      	b.n	8001ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab4:	f7ff f902 	bl	8000cbc <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001abc:	f7ff f8fe 	bl	8000cbc <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b64      	cmp	r3, #100	; 0x64
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e1f3      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1f0      	bne.n	8001abc <HAL_RCC_OscConfig+0xe8>
 8001ada:	e000      	b.n	8001ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d063      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001aec:	689b      	ldr	r3, [r3, #8]
 8001aee:	f003 030c 	and.w	r3, r3, #12
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d00b      	beq.n	8001b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001af6:	4b47      	ldr	r3, [pc, #284]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001afe:	2b08      	cmp	r3, #8
 8001b00:	d11c      	bne.n	8001b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b02:	4b44      	ldr	r3, [pc, #272]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d116      	bne.n	8001b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x152>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e1c7      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b26:	4b3b      	ldr	r3, [pc, #236]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4937      	ldr	r1, [pc, #220]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b36:	4313      	orrs	r3, r2
 8001b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3a:	e03a      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d020      	beq.n	8001b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b44:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_RCC_OscConfig+0x244>)
 8001b46:	2201      	movs	r2, #1
 8001b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4a:	f7ff f8b7 	bl	8000cbc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	e008      	b.n	8001b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b52:	f7ff f8b3 	bl	8000cbc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e1a8      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b64:	4b2b      	ldr	r3, [pc, #172]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0f0      	beq.n	8001b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b70:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4925      	ldr	r1, [pc, #148]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	600b      	str	r3, [r1, #0]
 8001b84:	e015      	b.n	8001bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b86:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <HAL_RCC_OscConfig+0x244>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff f896 	bl	8000cbc <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b94:	f7ff f892 	bl	8000cbc <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b02      	cmp	r3, #2
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e187      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0308 	and.w	r3, r3, #8
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d036      	beq.n	8001c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	695b      	ldr	r3, [r3, #20]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d016      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc6:	4b15      	ldr	r3, [pc, #84]	; (8001c1c <HAL_RCC_OscConfig+0x248>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7ff f876 	bl	8000cbc <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001bd4:	f7ff f872 	bl	8000cbc <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e167      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_OscConfig+0x240>)
 8001be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x200>
 8001bf2:	e01b      	b.n	8001c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bf4:	4b09      	ldr	r3, [pc, #36]	; (8001c1c <HAL_RCC_OscConfig+0x248>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff f85f 	bl	8000cbc <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	e00e      	b.n	8001c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c02:	f7ff f85b 	bl	8000cbc <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d907      	bls.n	8001c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e150      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
 8001c14:	40023800 	.word	0x40023800
 8001c18:	42470000 	.word	0x42470000
 8001c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c20:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d1ea      	bne.n	8001c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 8097 	beq.w	8001d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c3e:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d10f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	4b7d      	ldr	r3, [pc, #500]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a7c      	ldr	r2, [pc, #496]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b7a      	ldr	r3, [pc, #488]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c62:	60bb      	str	r3, [r7, #8]
 8001c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c66:	2301      	movs	r3, #1
 8001c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c6a:	4b77      	ldr	r3, [pc, #476]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c76:	4b74      	ldr	r3, [pc, #464]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a73      	ldr	r2, [pc, #460]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c82:	f7ff f81b 	bl	8000cbc <HAL_GetTick>
 8001c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c8a:	f7ff f817 	bl	8000cbc <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e10c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x474>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d0f0      	beq.n	8001c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x2ea>
 8001cb0:	4b64      	ldr	r3, [pc, #400]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb4:	4a63      	ldr	r2, [pc, #396]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6713      	str	r3, [r2, #112]	; 0x70
 8001cbc:	e01c      	b.n	8001cf8 <HAL_RCC_OscConfig+0x324>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	2b05      	cmp	r3, #5
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x30c>
 8001cc6:	4b5f      	ldr	r3, [pc, #380]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	4a5e      	ldr	r2, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd2:	4b5c      	ldr	r3, [pc, #368]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd6:	4a5b      	ldr	r2, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8001cde:	e00b      	b.n	8001cf8 <HAL_RCC_OscConfig+0x324>
 8001ce0:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce4:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001ce6:	f023 0301 	bic.w	r3, r3, #1
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70
 8001cec:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	4a54      	ldr	r2, [pc, #336]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	f023 0304 	bic.w	r3, r3, #4
 8001cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d015      	beq.n	8001d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d00:	f7fe ffdc 	bl	8000cbc <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d08:	f7fe ffd8 	bl	8000cbc <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e0cb      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d1e:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d22:	f003 0302 	and.w	r3, r3, #2
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0ee      	beq.n	8001d08 <HAL_RCC_OscConfig+0x334>
 8001d2a:	e014      	b.n	8001d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d2c:	f7fe ffc6 	bl	8000cbc <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7fe ffc2 	bl	8000cbc <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e0b5      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d4a:	4b3e      	ldr	r3, [pc, #248]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d4e:	f003 0302 	and.w	r3, r3, #2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1ee      	bne.n	8001d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d105      	bne.n	8001d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d5c:	4b39      	ldr	r3, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d60:	4a38      	ldr	r2, [pc, #224]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 80a1 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d72:	4b34      	ldr	r3, [pc, #208]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b08      	cmp	r3, #8
 8001d7c:	d05c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	699b      	ldr	r3, [r3, #24]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d141      	bne.n	8001e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d86:	4b31      	ldr	r3, [pc, #196]	; (8001e4c <HAL_RCC_OscConfig+0x478>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8c:	f7fe ff96 	bl	8000cbc <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d94:	f7fe ff92 	bl	8000cbc <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e087      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b27      	ldr	r3, [pc, #156]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	491b      	ldr	r1, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x478>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe ff6b 	bl	8000cbc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe ff67 	bl	8000cbc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e05c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x416>
 8001e08:	e054      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x478>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe ff54 	bl	8000cbc <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe ff50 	bl	8000cbc <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e045      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x470>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x444>
 8001e36:	e03d      	b.n	8001eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e038      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x4ec>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d028      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d121      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d11a      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0cc      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d90c      	bls.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b65      	ldr	r3, [pc, #404]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee8:	683a      	ldr	r2, [r7, #0]
 8001eea:	b2d2      	uxtb	r2, r2
 8001eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eee:	4b63      	ldr	r3, [pc, #396]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d001      	beq.n	8001f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0b8      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d020      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0304 	and.w	r3, r3, #4
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f18:	4b59      	ldr	r3, [pc, #356]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	4a58      	ldr	r2, [pc, #352]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f30:	4b53      	ldr	r3, [pc, #332]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	4a52      	ldr	r2, [pc, #328]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f3c:	4b50      	ldr	r3, [pc, #320]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	494d      	ldr	r1, [pc, #308]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d044      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d107      	bne.n	8001f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f62:	4b47      	ldr	r3, [pc, #284]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d119      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e07f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d003      	beq.n	8001f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b3f      	ldr	r3, [pc, #252]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e06f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3b      	ldr	r3, [pc, #236]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e067      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4934      	ldr	r1, [pc, #208]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7fe fe82 	bl	8000cbc <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7fe fe7e 	bl	8000cbc <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e04f      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b25      	ldr	r3, [pc, #148]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d20c      	bcs.n	800200c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b22      	ldr	r3, [pc, #136]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b20      	ldr	r3, [pc, #128]	; (800207c <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0307 	and.w	r3, r3, #7
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e032      	b.n	8002072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d008      	beq.n	800202a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4916      	ldr	r1, [pc, #88]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0308 	and.w	r3, r3, #8
 8002032:	2b00      	cmp	r3, #0
 8002034:	d009      	beq.n	800204a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002036:	4b12      	ldr	r3, [pc, #72]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	490e      	ldr	r1, [pc, #56]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002046:	4313      	orrs	r3, r2
 8002048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800204a:	f000 f821 	bl	8002090 <HAL_RCC_GetSysClockFreq>
 800204e:	4602      	mov	r2, r0
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_RCC_ClockConfig+0x1bc>)
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	490a      	ldr	r1, [pc, #40]	; (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 800205c:	5ccb      	ldrb	r3, [r1, r3]
 800205e:	fa22 f303 	lsr.w	r3, r2, r3
 8002062:	4a09      	ldr	r2, [pc, #36]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4618      	mov	r0, r3
 800206c:	f7fe fde2 	bl	8000c34 <HAL_InitTick>

  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3710      	adds	r7, #16
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023c00 	.word	0x40023c00
 8002080:	40023800 	.word	0x40023800
 8002084:	080034d8 	.word	0x080034d8
 8002088:	20000004 	.word	0x20000004
 800208c:	20000008 	.word	0x20000008

08002090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002094:	b094      	sub	sp, #80	; 0x50
 8002096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002098:	2300      	movs	r3, #0
 800209a:	647b      	str	r3, [r7, #68]	; 0x44
 800209c:	2300      	movs	r3, #0
 800209e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020a0:	2300      	movs	r3, #0
 80020a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80020a4:	2300      	movs	r3, #0
 80020a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020a8:	4b79      	ldr	r3, [pc, #484]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d00d      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x40>
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	f200 80e1 	bhi.w	800227c <HAL_RCC_GetSysClockFreq+0x1ec>
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d002      	beq.n	80020c4 <HAL_RCC_GetSysClockFreq+0x34>
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0x3a>
 80020c2:	e0db      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020c4:	4b73      	ldr	r3, [pc, #460]	; (8002294 <HAL_RCC_GetSysClockFreq+0x204>)
 80020c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80020c8:	e0db      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020ca:	4b73      	ldr	r3, [pc, #460]	; (8002298 <HAL_RCC_GetSysClockFreq+0x208>)
 80020cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020ce:	e0d8      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020d0:	4b6f      	ldr	r3, [pc, #444]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80020da:	4b6d      	ldr	r3, [pc, #436]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d063      	beq.n	80021ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020e6:	4b6a      	ldr	r3, [pc, #424]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	099b      	lsrs	r3, r3, #6
 80020ec:	2200      	movs	r2, #0
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020f8:	633b      	str	r3, [r7, #48]	; 0x30
 80020fa:	2300      	movs	r3, #0
 80020fc:	637b      	str	r3, [r7, #52]	; 0x34
 80020fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002102:	4622      	mov	r2, r4
 8002104:	462b      	mov	r3, r5
 8002106:	f04f 0000 	mov.w	r0, #0
 800210a:	f04f 0100 	mov.w	r1, #0
 800210e:	0159      	lsls	r1, r3, #5
 8002110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002114:	0150      	lsls	r0, r2, #5
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4621      	mov	r1, r4
 800211c:	1a51      	subs	r1, r2, r1
 800211e:	6139      	str	r1, [r7, #16]
 8002120:	4629      	mov	r1, r5
 8002122:	eb63 0301 	sbc.w	r3, r3, r1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	f04f 0300 	mov.w	r3, #0
 8002130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002134:	4659      	mov	r1, fp
 8002136:	018b      	lsls	r3, r1, #6
 8002138:	4651      	mov	r1, sl
 800213a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800213e:	4651      	mov	r1, sl
 8002140:	018a      	lsls	r2, r1, #6
 8002142:	4651      	mov	r1, sl
 8002144:	ebb2 0801 	subs.w	r8, r2, r1
 8002148:	4659      	mov	r1, fp
 800214a:	eb63 0901 	sbc.w	r9, r3, r1
 800214e:	f04f 0200 	mov.w	r2, #0
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800215a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800215e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002162:	4690      	mov	r8, r2
 8002164:	4699      	mov	r9, r3
 8002166:	4623      	mov	r3, r4
 8002168:	eb18 0303 	adds.w	r3, r8, r3
 800216c:	60bb      	str	r3, [r7, #8]
 800216e:	462b      	mov	r3, r5
 8002170:	eb49 0303 	adc.w	r3, r9, r3
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	f04f 0200 	mov.w	r2, #0
 800217a:	f04f 0300 	mov.w	r3, #0
 800217e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002182:	4629      	mov	r1, r5
 8002184:	024b      	lsls	r3, r1, #9
 8002186:	4621      	mov	r1, r4
 8002188:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800218c:	4621      	mov	r1, r4
 800218e:	024a      	lsls	r2, r1, #9
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002196:	2200      	movs	r2, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
 800219a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800219c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021a0:	f7fe f812 	bl	80001c8 <__aeabi_uldivmod>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	4613      	mov	r3, r2
 80021aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021ac:	e058      	b.n	8002260 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ae:	4b38      	ldr	r3, [pc, #224]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	099b      	lsrs	r3, r3, #6
 80021b4:	2200      	movs	r2, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	4611      	mov	r1, r2
 80021ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021be:	623b      	str	r3, [r7, #32]
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	; 0x24
 80021c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021c8:	4642      	mov	r2, r8
 80021ca:	464b      	mov	r3, r9
 80021cc:	f04f 0000 	mov.w	r0, #0
 80021d0:	f04f 0100 	mov.w	r1, #0
 80021d4:	0159      	lsls	r1, r3, #5
 80021d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021da:	0150      	lsls	r0, r2, #5
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4641      	mov	r1, r8
 80021e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80021e6:	4649      	mov	r1, r9
 80021e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80021f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80021fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002200:	ebb2 040a 	subs.w	r4, r2, sl
 8002204:	eb63 050b 	sbc.w	r5, r3, fp
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	f04f 0300 	mov.w	r3, #0
 8002210:	00eb      	lsls	r3, r5, #3
 8002212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002216:	00e2      	lsls	r2, r4, #3
 8002218:	4614      	mov	r4, r2
 800221a:	461d      	mov	r5, r3
 800221c:	4643      	mov	r3, r8
 800221e:	18e3      	adds	r3, r4, r3
 8002220:	603b      	str	r3, [r7, #0]
 8002222:	464b      	mov	r3, r9
 8002224:	eb45 0303 	adc.w	r3, r5, r3
 8002228:	607b      	str	r3, [r7, #4]
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	f04f 0300 	mov.w	r3, #0
 8002232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002236:	4629      	mov	r1, r5
 8002238:	028b      	lsls	r3, r1, #10
 800223a:	4621      	mov	r1, r4
 800223c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002240:	4621      	mov	r1, r4
 8002242:	028a      	lsls	r2, r1, #10
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800224a:	2200      	movs	r2, #0
 800224c:	61bb      	str	r3, [r7, #24]
 800224e:	61fa      	str	r2, [r7, #28]
 8002250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002254:	f7fd ffb8 	bl	80001c8 <__aeabi_uldivmod>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4613      	mov	r3, r2
 800225e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <HAL_RCC_GetSysClockFreq+0x200>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	0c1b      	lsrs	r3, r3, #16
 8002266:	f003 0303 	and.w	r3, r3, #3
 800226a:	3301      	adds	r3, #1
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002274:	fbb2 f3f3 	udiv	r3, r2, r3
 8002278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800227a:	e002      	b.n	8002282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_GetSysClockFreq+0x204>)
 800227e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002284:	4618      	mov	r0, r3
 8002286:	3750      	adds	r7, #80	; 0x50
 8002288:	46bd      	mov	sp, r7
 800228a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800228e:	bf00      	nop
 8002290:	40023800 	.word	0x40023800
 8002294:	00f42400 	.word	0x00f42400
 8002298:	007a1200 	.word	0x007a1200

0800229c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a0:	4b03      	ldr	r3, [pc, #12]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022a2:	681b      	ldr	r3, [r3, #0]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	20000004 	.word	0x20000004

080022b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022b8:	f7ff fff0 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022bc:	4602      	mov	r2, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	0a9b      	lsrs	r3, r3, #10
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4903      	ldr	r1, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ca:	5ccb      	ldrb	r3, [r1, r3]
 80022cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40023800 	.word	0x40023800
 80022d8:	080034e8 	.word	0x080034e8

080022dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f7ff ffdc 	bl	800229c <HAL_RCC_GetHCLKFreq>
 80022e4:	4602      	mov	r2, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	0b5b      	lsrs	r3, r3, #13
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4903      	ldr	r1, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f2:	5ccb      	ldrb	r3, [r1, r3]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40023800 	.word	0x40023800
 8002300:	080034e8 	.word	0x080034e8

08002304 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e03f      	b.n	8002396 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7fe fb76 	bl	8000a1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2224      	movs	r2, #36	; 0x24
 8002334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	68da      	ldr	r2, [r3, #12]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002346:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fe19 	bl	8002f80 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	691a      	ldr	r2, [r3, #16]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800235c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800236c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800237c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2220      	movs	r2, #32
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	b08a      	sub	sp, #40	; 0x28
 80023a2:	af02      	add	r7, sp, #8
 80023a4:	60f8      	str	r0, [r7, #12]
 80023a6:	60b9      	str	r1, [r7, #8]
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4613      	mov	r3, r2
 80023ac:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	d17c      	bne.n	80024b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d002      	beq.n	80023ca <HAL_UART_Transmit+0x2c>
 80023c4:	88fb      	ldrh	r3, [r7, #6]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e075      	b.n	80024ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_UART_Transmit+0x3e>
 80023d8:	2302      	movs	r3, #2
 80023da:	e06e      	b.n	80024ba <HAL_UART_Transmit+0x11c>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2221      	movs	r2, #33	; 0x21
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80023f2:	f7fe fc63 	bl	8000cbc <HAL_GetTick>
 80023f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	88fa      	ldrh	r2, [r7, #6]
 80023fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	88fa      	ldrh	r2, [r7, #6]
 8002402:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800240c:	d108      	bne.n	8002420 <HAL_UART_Transmit+0x82>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	e003      	b.n	8002428 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002430:	e02a      	b.n	8002488 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	2200      	movs	r2, #0
 800243a:	2180      	movs	r1, #128	; 0x80
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fb59 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e036      	b.n	80024ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d10b      	bne.n	800246a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002452:	69bb      	ldr	r3, [r7, #24]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	461a      	mov	r2, r3
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002460:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	3302      	adds	r3, #2
 8002466:	61bb      	str	r3, [r7, #24]
 8002468:	e007      	b.n	800247a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	781a      	ldrb	r2, [r3, #0]
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	3301      	adds	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800247e:	b29b      	uxth	r3, r3
 8002480:	3b01      	subs	r3, #1
 8002482:	b29a      	uxth	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800248c:	b29b      	uxth	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1cf      	bne.n	8002432 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	9300      	str	r3, [sp, #0]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	2200      	movs	r2, #0
 800249a:	2140      	movs	r1, #64	; 0x40
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f000 fb29 	bl	8002af4 <UART_WaitOnFlagUntilTimeout>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d001      	beq.n	80024ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e006      	b.n	80024ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2220      	movs	r2, #32
 80024b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e000      	b.n	80024ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024b8:	2302      	movs	r3, #2
  }
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3720      	adds	r7, #32
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b085      	sub	sp, #20
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	4613      	mov	r3, r2
 80024ce:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d130      	bne.n	800253e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d002      	beq.n	80024e8 <HAL_UART_Transmit_IT+0x26>
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d101      	bne.n	80024ec <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	e029      	b.n	8002540 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <HAL_UART_Transmit_IT+0x38>
 80024f6:	2302      	movs	r3, #2
 80024f8:	e022      	b.n	8002540 <HAL_UART_Transmit_IT+0x7e>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2201      	movs	r2, #1
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	88fa      	ldrh	r2, [r7, #6]
 800250c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	88fa      	ldrh	r2, [r7, #6]
 8002512:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2200      	movs	r2, #0
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2221      	movs	r2, #33	; 0x21
 800251e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68da      	ldr	r2, [r3, #12]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002538:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800253a:	2300      	movs	r3, #0
 800253c:	e000      	b.n	8002540 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800253e:	2302      	movs	r3, #2
  }
}
 8002540:	4618      	mov	r0, r3
 8002542:	3714      	adds	r7, #20
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	4613      	mov	r3, r2
 8002558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002560:	b2db      	uxtb	r3, r3
 8002562:	2b20      	cmp	r3, #32
 8002564:	d11d      	bne.n	80025a2 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d002      	beq.n	8002572 <HAL_UART_Receive_IT+0x26>
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e016      	b.n	80025a4 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800257c:	2b01      	cmp	r3, #1
 800257e:	d101      	bne.n	8002584 <HAL_UART_Receive_IT+0x38>
 8002580:	2302      	movs	r3, #2
 8002582:	e00f      	b.n	80025a4 <HAL_UART_Receive_IT+0x58>
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	461a      	mov	r2, r3
 8002596:	68b9      	ldr	r1, [r7, #8]
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fb19 	bl	8002bd0 <UART_Start_Receive_IT>
 800259e:	4603      	mov	r3, r0
 80025a0:	e000      	b.n	80025a4 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
  }
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b0ba      	sub	sp, #232	; 0xe8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695b      	ldr	r3, [r3, #20]
 80025ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80025de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80025ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10f      	bne.n	8002612 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f6:	f003 0320 	and.w	r3, r3, #32
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d009      	beq.n	8002612 <HAL_UART_IRQHandler+0x66>
 80025fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002602:	f003 0320 	and.w	r3, r3, #32
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 fbfd 	bl	8002e0a <UART_Receive_IT>
      return;
 8002610:	e256      	b.n	8002ac0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002612:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 80de 	beq.w	80027d8 <HAL_UART_IRQHandler+0x22c>
 800261c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002620:	f003 0301 	and.w	r3, r3, #1
 8002624:	2b00      	cmp	r3, #0
 8002626:	d106      	bne.n	8002636 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800262c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002630:	2b00      	cmp	r3, #0
 8002632:	f000 80d1 	beq.w	80027d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_UART_IRQHandler+0xae>
 8002642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f043 0201 	orr.w	r2, r3, #1
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_UART_IRQHandler+0xd2>
 8002666:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d005      	beq.n	800267e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	f043 0202 	orr.w	r2, r3, #2
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800267e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_UART_IRQHandler+0xf6>
 800268a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	2b00      	cmp	r3, #0
 8002694:	d005      	beq.n	80026a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	f043 0204 	orr.w	r2, r3, #4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80026a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d011      	beq.n	80026d2 <HAL_UART_IRQHandler+0x126>
 80026ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026b2:	f003 0320 	and.w	r3, r3, #32
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d105      	bne.n	80026c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80026ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d005      	beq.n	80026d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0208 	orr.w	r2, r3, #8
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 81ed 	beq.w	8002ab6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80026dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <HAL_UART_IRQHandler+0x14e>
 80026e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ec:	f003 0320 	and.w	r3, r3, #32
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 fb88 	bl	8002e0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	695b      	ldr	r3, [r3, #20]
 8002700:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002704:	2b40      	cmp	r3, #64	; 0x40
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d103      	bne.n	8002726 <HAL_UART_IRQHandler+0x17a>
 800271e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002722:	2b00      	cmp	r3, #0
 8002724:	d04f      	beq.n	80027c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fa90 	bl	8002c4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002736:	2b40      	cmp	r3, #64	; 0x40
 8002738:	d141      	bne.n	80027be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	3314      	adds	r3, #20
 8002740:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002744:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002748:	e853 3f00 	ldrex	r3, [r3]
 800274c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002750:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002754:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3314      	adds	r3, #20
 8002762:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002766:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800276a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800276e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002772:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002776:	e841 2300 	strex	r3, r2, [r1]
 800277a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800277e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d1d9      	bne.n	800273a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278a:	2b00      	cmp	r3, #0
 800278c:	d013      	beq.n	80027b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002792:	4a7d      	ldr	r2, [pc, #500]	; (8002988 <HAL_UART_IRQHandler+0x3dc>)
 8002794:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	4618      	mov	r0, r3
 800279c:	f7fe fcee 	bl	800117c <HAL_DMA_Abort_IT>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d016      	beq.n	80027d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80027b0:	4610      	mov	r0, r2
 80027b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027b4:	e00e      	b.n	80027d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f986 	bl	8002ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027bc:	e00a      	b.n	80027d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f982 	bl	8002ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027c4:	e006      	b.n	80027d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 f97e 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80027d2:	e170      	b.n	8002ab6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d4:	bf00      	nop
    return;
 80027d6:	e16e      	b.n	8002ab6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027dc:	2b01      	cmp	r3, #1
 80027de:	f040 814a 	bne.w	8002a76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80027e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027e6:	f003 0310 	and.w	r3, r3, #16
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 8143 	beq.w	8002a76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80027f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027f4:	f003 0310 	and.w	r3, r3, #16
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 813c 	beq.w	8002a76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80027fe:	2300      	movs	r3, #0
 8002800:	60bb      	str	r3, [r7, #8]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800281e:	2b40      	cmp	r3, #64	; 0x40
 8002820:	f040 80b4 	bne.w	800298c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002830:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8140 	beq.w	8002aba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800283e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002842:	429a      	cmp	r2, r3
 8002844:	f080 8139 	bcs.w	8002aba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800284e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285a:	f000 8088 	beq.w	800296e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	330c      	adds	r3, #12
 8002864:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002868:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800286c:	e853 3f00 	ldrex	r3, [r3]
 8002870:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002878:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800287c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800288a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800288e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002896:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800289a:	e841 2300 	strex	r3, r2, [r1]
 800289e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80028a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1d9      	bne.n	800285e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	3314      	adds	r3, #20
 80028b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80028ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028bc:	f023 0301 	bic.w	r3, r3, #1
 80028c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	3314      	adds	r3, #20
 80028ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80028d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80028d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80028da:	e841 2300 	strex	r3, r2, [r1]
 80028de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80028e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1e1      	bne.n	80028aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	3314      	adds	r3, #20
 80028ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80028f0:	e853 3f00 	ldrex	r3, [r3]
 80028f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80028f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	3314      	adds	r3, #20
 8002906:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800290a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800290c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002910:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002912:	e841 2300 	strex	r3, r2, [r1]
 8002916:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002918:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1e3      	bne.n	80028e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2220      	movs	r2, #32
 8002922:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800293c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800293e:	f023 0310 	bic.w	r3, r3, #16
 8002942:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	330c      	adds	r3, #12
 800294c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002950:	65ba      	str	r2, [r7, #88]	; 0x58
 8002952:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002956:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002958:	e841 2300 	strex	r3, r2, [r1]
 800295c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1e3      	bne.n	800292c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002968:	4618      	mov	r0, r3
 800296a:	f7fe fb97 	bl	800109c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002976:	b29b      	uxth	r3, r3
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	b29b      	uxth	r3, r3
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 f8ac 	bl	8002adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002984:	e099      	b.n	8002aba <HAL_UART_IRQHandler+0x50e>
 8002986:	bf00      	nop
 8002988:	08002d13 	.word	0x08002d13
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002994:	b29b      	uxth	r3, r3
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	f000 808b 	beq.w	8002abe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80029a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f000 8086 	beq.w	8002abe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	330c      	adds	r3, #12
 80029b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	e853 3f00 	ldrex	r3, [r3]
 80029c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80029c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80029c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	330c      	adds	r3, #12
 80029d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80029d6:	647a      	str	r2, [r7, #68]	; 0x44
 80029d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80029dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029de:	e841 2300 	strex	r3, r2, [r1]
 80029e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80029e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1e3      	bne.n	80029b2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	3314      	adds	r3, #20
 80029f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	e853 3f00 	ldrex	r3, [r3]
 80029f8:	623b      	str	r3, [r7, #32]
   return(result);
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	f023 0301 	bic.w	r3, r3, #1
 8002a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	3314      	adds	r3, #20
 8002a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8002a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a16:	e841 2300 	strex	r3, r2, [r1]
 8002a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d1e3      	bne.n	80029ea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2220      	movs	r2, #32
 8002a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	e853 3f00 	ldrex	r3, [r3]
 8002a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 0310 	bic.w	r3, r3, #16
 8002a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	330c      	adds	r3, #12
 8002a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002a54:	61fa      	str	r2, [r7, #28]
 8002a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a58:	69b9      	ldr	r1, [r7, #24]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	e841 2300 	strex	r3, r2, [r1]
 8002a60:	617b      	str	r3, [r7, #20]
   return(result);
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1e3      	bne.n	8002a30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002a68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f834 	bl	8002adc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a74:	e023      	b.n	8002abe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d009      	beq.n	8002a96 <HAL_UART_IRQHandler+0x4ea>
 8002a82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f953 	bl	8002d3a <UART_Transmit_IT>
    return;
 8002a94:	e014      	b.n	8002ac0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00e      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x514>
 8002aa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d008      	beq.n	8002ac0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f993 	bl	8002dda <UART_EndTransmit_IT>
    return;
 8002ab4:	e004      	b.n	8002ac0 <HAL_UART_IRQHandler+0x514>
    return;
 8002ab6:	bf00      	nop
 8002ab8:	e002      	b.n	8002ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8002aba:	bf00      	nop
 8002abc:	e000      	b.n	8002ac0 <HAL_UART_IRQHandler+0x514>
      return;
 8002abe:	bf00      	nop
  }
}
 8002ac0:	37e8      	adds	r7, #232	; 0xe8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop

08002ac8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b090      	sub	sp, #64	; 0x40
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b04:	e050      	b.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b0c:	d04c      	beq.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002b0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x30>
 8002b14:	f7fe f8d2 	bl	8000cbc <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d241      	bcs.n	8002ba8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	330c      	adds	r3, #12
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	e853 3f00 	ldrex	r3, [r3]
 8002b32:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	330c      	adds	r3, #12
 8002b42:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002b44:	637a      	str	r2, [r7, #52]	; 0x34
 8002b46:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b4c:	e841 2300 	strex	r3, r2, [r1]
 8002b50:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d1e5      	bne.n	8002b24 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	3314      	adds	r3, #20
 8002b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	613b      	str	r3, [r7, #16]
   return(result);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f023 0301 	bic.w	r3, r3, #1
 8002b6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3314      	adds	r3, #20
 8002b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002b78:	623a      	str	r2, [r7, #32]
 8002b7a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b7c:	69f9      	ldr	r1, [r7, #28]
 8002b7e:	6a3a      	ldr	r2, [r7, #32]
 8002b80:	e841 2300 	strex	r3, r2, [r1]
 8002b84:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1e5      	bne.n	8002b58 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	2220      	movs	r2, #32
 8002b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e00f      	b.n	8002bc8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	68ba      	ldr	r2, [r7, #8]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d09f      	beq.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3740      	adds	r7, #64	; 0x40
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	88fa      	ldrh	r2, [r7, #6]
 8002be8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	88fa      	ldrh	r2, [r7, #6]
 8002bee:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2222      	movs	r2, #34	; 0x22
 8002bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d007      	beq.n	8002c1e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c1c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	695a      	ldr	r2, [r3, #20]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f042 0201 	orr.w	r2, r2, #1
 8002c2c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f042 0220 	orr.w	r2, r2, #32
 8002c3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3714      	adds	r7, #20
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b095      	sub	sp, #84	; 0x54
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c5e:	e853 3f00 	ldrex	r3, [r3]
 8002c62:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	330c      	adds	r3, #12
 8002c72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c74:	643a      	str	r2, [r7, #64]	; 0x40
 8002c76:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c78:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002c7a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c7c:	e841 2300 	strex	r3, r2, [r1]
 8002c80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d1e5      	bne.n	8002c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	e853 3f00 	ldrex	r3, [r3]
 8002c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ca8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb0:	e841 2300 	strex	r3, r2, [r1]
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1e5      	bne.n	8002c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d119      	bne.n	8002cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	330c      	adds	r3, #12
 8002cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	e853 3f00 	ldrex	r3, [r3]
 8002cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	f023 0310 	bic.w	r3, r3, #16
 8002cda:	647b      	str	r3, [r7, #68]	; 0x44
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ce4:	61ba      	str	r2, [r7, #24]
 8002ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	69ba      	ldr	r2, [r7, #24]
 8002cec:	e841 2300 	strex	r3, r2, [r1]
 8002cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1e5      	bne.n	8002cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2220      	movs	r2, #32
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002d06:	bf00      	nop
 8002d08:	3754      	adds	r7, #84	; 0x54
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr

08002d12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b084      	sub	sp, #16
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2200      	movs	r2, #0
 8002d24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d2c:	68f8      	ldr	r0, [r7, #12]
 8002d2e:	f7ff fecb 	bl	8002ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b085      	sub	sp, #20
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b21      	cmp	r3, #33	; 0x21
 8002d4c:	d13e      	bne.n	8002dcc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d56:	d114      	bne.n	8002d82 <UART_Transmit_IT+0x48>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d110      	bne.n	8002d82 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	881b      	ldrh	r3, [r3, #0]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a1b      	ldr	r3, [r3, #32]
 8002d7a:	1c9a      	adds	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	621a      	str	r2, [r3, #32]
 8002d80:	e008      	b.n	8002d94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	1c59      	adds	r1, r3, #1
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6211      	str	r1, [r2, #32]
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	4619      	mov	r1, r3
 8002da2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10f      	bne.n	8002dc8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68da      	ldr	r2, [r3, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002db6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dc6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	e000      	b.n	8002dce <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dcc:	2302      	movs	r3, #2
  }
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3714      	adds	r7, #20
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b082      	sub	sp, #8
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68da      	ldr	r2, [r3, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002df0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2220      	movs	r2, #32
 8002df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f7fd fcb0 	bl	8000760 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b08c      	sub	sp, #48	; 0x30
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	2b22      	cmp	r3, #34	; 0x22
 8002e1c:	f040 80ab 	bne.w	8002f76 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e28:	d117      	bne.n	8002e5a <UART_Receive_IT+0x50>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d113      	bne.n	8002e5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e48:	b29a      	uxth	r2, r3
 8002e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e52:	1c9a      	adds	r2, r3, #2
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	629a      	str	r2, [r3, #40]	; 0x28
 8002e58:	e026      	b.n	8002ea8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002e60:	2300      	movs	r3, #0
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e6c:	d007      	beq.n	8002e7e <UART_Receive_IT+0x74>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d10a      	bne.n	8002e8c <UART_Receive_IT+0x82>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d106      	bne.n	8002e8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e88:	701a      	strb	r2, [r3, #0]
 8002e8a:	e008      	b.n	8002e9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	3b01      	subs	r3, #1
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d15a      	bne.n	8002f72 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0220 	bic.w	r2, r2, #32
 8002eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68da      	ldr	r2, [r3, #12]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002eda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d135      	bne.n	8002f68 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	330c      	adds	r3, #12
 8002f08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	613b      	str	r3, [r7, #16]
   return(result);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f023 0310 	bic.w	r3, r3, #16
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f22:	623a      	str	r2, [r7, #32]
 8002f24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f26:	69f9      	ldr	r1, [r7, #28]
 8002f28:	6a3a      	ldr	r2, [r7, #32]
 8002f2a:	e841 2300 	strex	r3, r2, [r1]
 8002f2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1e5      	bne.n	8002f02 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d10a      	bne.n	8002f5a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f44:	2300      	movs	r3, #0
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f7ff fdbb 	bl	8002adc <HAL_UARTEx_RxEventCallback>
 8002f66:	e002      	b.n	8002f6e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7fd fc03 	bl	8000774 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	e002      	b.n	8002f78 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002f72:	2300      	movs	r3, #0
 8002f74:	e000      	b.n	8002f78 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002f76:	2302      	movs	r3, #2
  }
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3730      	adds	r7, #48	; 0x30
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f84:	b0c0      	sub	sp, #256	; 0x100
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f9c:	68d9      	ldr	r1, [r3, #12]
 8002f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	ea40 0301 	orr.w	r3, r0, r1
 8002fa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002fd8:	f021 010c 	bic.w	r1, r1, #12
 8002fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002fe6:	430b      	orrs	r3, r1
 8002fe8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ffa:	6999      	ldr	r1, [r3, #24]
 8002ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	ea40 0301 	orr.w	r3, r0, r1
 8003006:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4b8f      	ldr	r3, [pc, #572]	; (800324c <UART_SetConfig+0x2cc>)
 8003010:	429a      	cmp	r2, r3
 8003012:	d005      	beq.n	8003020 <UART_SetConfig+0xa0>
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	4b8d      	ldr	r3, [pc, #564]	; (8003250 <UART_SetConfig+0x2d0>)
 800301c:	429a      	cmp	r2, r3
 800301e:	d104      	bne.n	800302a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003020:	f7ff f95c 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 8003024:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003028:	e003      	b.n	8003032 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800302a:	f7ff f943 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 800302e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800303c:	f040 810c 	bne.w	8003258 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003040:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003044:	2200      	movs	r2, #0
 8003046:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800304a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800304e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003052:	4622      	mov	r2, r4
 8003054:	462b      	mov	r3, r5
 8003056:	1891      	adds	r1, r2, r2
 8003058:	65b9      	str	r1, [r7, #88]	; 0x58
 800305a:	415b      	adcs	r3, r3
 800305c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800305e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003062:	4621      	mov	r1, r4
 8003064:	eb12 0801 	adds.w	r8, r2, r1
 8003068:	4629      	mov	r1, r5
 800306a:	eb43 0901 	adc.w	r9, r3, r1
 800306e:	f04f 0200 	mov.w	r2, #0
 8003072:	f04f 0300 	mov.w	r3, #0
 8003076:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800307a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800307e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003082:	4690      	mov	r8, r2
 8003084:	4699      	mov	r9, r3
 8003086:	4623      	mov	r3, r4
 8003088:	eb18 0303 	adds.w	r3, r8, r3
 800308c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003090:	462b      	mov	r3, r5
 8003092:	eb49 0303 	adc.w	r3, r9, r3
 8003096:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800309a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80030a6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80030aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80030ae:	460b      	mov	r3, r1
 80030b0:	18db      	adds	r3, r3, r3
 80030b2:	653b      	str	r3, [r7, #80]	; 0x50
 80030b4:	4613      	mov	r3, r2
 80030b6:	eb42 0303 	adc.w	r3, r2, r3
 80030ba:	657b      	str	r3, [r7, #84]	; 0x54
 80030bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80030c0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80030c4:	f7fd f880 	bl	80001c8 <__aeabi_uldivmod>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	4b61      	ldr	r3, [pc, #388]	; (8003254 <UART_SetConfig+0x2d4>)
 80030ce:	fba3 2302 	umull	r2, r3, r3, r2
 80030d2:	095b      	lsrs	r3, r3, #5
 80030d4:	011c      	lsls	r4, r3, #4
 80030d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030e0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80030e4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80030e8:	4642      	mov	r2, r8
 80030ea:	464b      	mov	r3, r9
 80030ec:	1891      	adds	r1, r2, r2
 80030ee:	64b9      	str	r1, [r7, #72]	; 0x48
 80030f0:	415b      	adcs	r3, r3
 80030f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030f4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80030f8:	4641      	mov	r1, r8
 80030fa:	eb12 0a01 	adds.w	sl, r2, r1
 80030fe:	4649      	mov	r1, r9
 8003100:	eb43 0b01 	adc.w	fp, r3, r1
 8003104:	f04f 0200 	mov.w	r2, #0
 8003108:	f04f 0300 	mov.w	r3, #0
 800310c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003110:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003114:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003118:	4692      	mov	sl, r2
 800311a:	469b      	mov	fp, r3
 800311c:	4643      	mov	r3, r8
 800311e:	eb1a 0303 	adds.w	r3, sl, r3
 8003122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003126:	464b      	mov	r3, r9
 8003128:	eb4b 0303 	adc.w	r3, fp, r3
 800312c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800313c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003140:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003144:	460b      	mov	r3, r1
 8003146:	18db      	adds	r3, r3, r3
 8003148:	643b      	str	r3, [r7, #64]	; 0x40
 800314a:	4613      	mov	r3, r2
 800314c:	eb42 0303 	adc.w	r3, r2, r3
 8003150:	647b      	str	r3, [r7, #68]	; 0x44
 8003152:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003156:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800315a:	f7fd f835 	bl	80001c8 <__aeabi_uldivmod>
 800315e:	4602      	mov	r2, r0
 8003160:	460b      	mov	r3, r1
 8003162:	4611      	mov	r1, r2
 8003164:	4b3b      	ldr	r3, [pc, #236]	; (8003254 <UART_SetConfig+0x2d4>)
 8003166:	fba3 2301 	umull	r2, r3, r3, r1
 800316a:	095b      	lsrs	r3, r3, #5
 800316c:	2264      	movs	r2, #100	; 0x64
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	1acb      	subs	r3, r1, r3
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <UART_SetConfig+0x2d4>)
 800317c:	fba3 2302 	umull	r2, r3, r3, r2
 8003180:	095b      	lsrs	r3, r3, #5
 8003182:	005b      	lsls	r3, r3, #1
 8003184:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003188:	441c      	add	r4, r3
 800318a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800318e:	2200      	movs	r2, #0
 8003190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003194:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003198:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800319c:	4642      	mov	r2, r8
 800319e:	464b      	mov	r3, r9
 80031a0:	1891      	adds	r1, r2, r2
 80031a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80031a4:	415b      	adcs	r3, r3
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80031ac:	4641      	mov	r1, r8
 80031ae:	1851      	adds	r1, r2, r1
 80031b0:	6339      	str	r1, [r7, #48]	; 0x30
 80031b2:	4649      	mov	r1, r9
 80031b4:	414b      	adcs	r3, r1
 80031b6:	637b      	str	r3, [r7, #52]	; 0x34
 80031b8:	f04f 0200 	mov.w	r2, #0
 80031bc:	f04f 0300 	mov.w	r3, #0
 80031c0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80031c4:	4659      	mov	r1, fp
 80031c6:	00cb      	lsls	r3, r1, #3
 80031c8:	4651      	mov	r1, sl
 80031ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031ce:	4651      	mov	r1, sl
 80031d0:	00ca      	lsls	r2, r1, #3
 80031d2:	4610      	mov	r0, r2
 80031d4:	4619      	mov	r1, r3
 80031d6:	4603      	mov	r3, r0
 80031d8:	4642      	mov	r2, r8
 80031da:	189b      	adds	r3, r3, r2
 80031dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80031e0:	464b      	mov	r3, r9
 80031e2:	460a      	mov	r2, r1
 80031e4:	eb42 0303 	adc.w	r3, r2, r3
 80031e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80031f8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80031fc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003200:	460b      	mov	r3, r1
 8003202:	18db      	adds	r3, r3, r3
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	4613      	mov	r3, r2
 8003208:	eb42 0303 	adc.w	r3, r2, r3
 800320c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800320e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003212:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003216:	f7fc ffd7 	bl	80001c8 <__aeabi_uldivmod>
 800321a:	4602      	mov	r2, r0
 800321c:	460b      	mov	r3, r1
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <UART_SetConfig+0x2d4>)
 8003220:	fba3 1302 	umull	r1, r3, r3, r2
 8003224:	095b      	lsrs	r3, r3, #5
 8003226:	2164      	movs	r1, #100	; 0x64
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	3332      	adds	r3, #50	; 0x32
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <UART_SetConfig+0x2d4>)
 8003234:	fba2 2303 	umull	r2, r3, r2, r3
 8003238:	095b      	lsrs	r3, r3, #5
 800323a:	f003 0207 	and.w	r2, r3, #7
 800323e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4422      	add	r2, r4
 8003246:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003248:	e106      	b.n	8003458 <UART_SetConfig+0x4d8>
 800324a:	bf00      	nop
 800324c:	40011000 	.word	0x40011000
 8003250:	40011400 	.word	0x40011400
 8003254:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003258:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800325c:	2200      	movs	r2, #0
 800325e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003262:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003266:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800326a:	4642      	mov	r2, r8
 800326c:	464b      	mov	r3, r9
 800326e:	1891      	adds	r1, r2, r2
 8003270:	6239      	str	r1, [r7, #32]
 8003272:	415b      	adcs	r3, r3
 8003274:	627b      	str	r3, [r7, #36]	; 0x24
 8003276:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800327a:	4641      	mov	r1, r8
 800327c:	1854      	adds	r4, r2, r1
 800327e:	4649      	mov	r1, r9
 8003280:	eb43 0501 	adc.w	r5, r3, r1
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	00eb      	lsls	r3, r5, #3
 800328e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003292:	00e2      	lsls	r2, r4, #3
 8003294:	4614      	mov	r4, r2
 8003296:	461d      	mov	r5, r3
 8003298:	4643      	mov	r3, r8
 800329a:	18e3      	adds	r3, r4, r3
 800329c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032a0:	464b      	mov	r3, r9
 80032a2:	eb45 0303 	adc.w	r3, r5, r3
 80032a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032ba:	f04f 0200 	mov.w	r2, #0
 80032be:	f04f 0300 	mov.w	r3, #0
 80032c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032c6:	4629      	mov	r1, r5
 80032c8:	008b      	lsls	r3, r1, #2
 80032ca:	4621      	mov	r1, r4
 80032cc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032d0:	4621      	mov	r1, r4
 80032d2:	008a      	lsls	r2, r1, #2
 80032d4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80032d8:	f7fc ff76 	bl	80001c8 <__aeabi_uldivmod>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4b60      	ldr	r3, [pc, #384]	; (8003464 <UART_SetConfig+0x4e4>)
 80032e2:	fba3 2302 	umull	r2, r3, r3, r2
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	011c      	lsls	r4, r3, #4
 80032ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80032f4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80032f8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80032fc:	4642      	mov	r2, r8
 80032fe:	464b      	mov	r3, r9
 8003300:	1891      	adds	r1, r2, r2
 8003302:	61b9      	str	r1, [r7, #24]
 8003304:	415b      	adcs	r3, r3
 8003306:	61fb      	str	r3, [r7, #28]
 8003308:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800330c:	4641      	mov	r1, r8
 800330e:	1851      	adds	r1, r2, r1
 8003310:	6139      	str	r1, [r7, #16]
 8003312:	4649      	mov	r1, r9
 8003314:	414b      	adcs	r3, r1
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003324:	4659      	mov	r1, fp
 8003326:	00cb      	lsls	r3, r1, #3
 8003328:	4651      	mov	r1, sl
 800332a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800332e:	4651      	mov	r1, sl
 8003330:	00ca      	lsls	r2, r1, #3
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	4603      	mov	r3, r0
 8003338:	4642      	mov	r2, r8
 800333a:	189b      	adds	r3, r3, r2
 800333c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003340:	464b      	mov	r3, r9
 8003342:	460a      	mov	r2, r1
 8003344:	eb42 0303 	adc.w	r3, r2, r3
 8003348:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	2200      	movs	r2, #0
 8003354:	67bb      	str	r3, [r7, #120]	; 0x78
 8003356:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003358:	f04f 0200 	mov.w	r2, #0
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003364:	4649      	mov	r1, r9
 8003366:	008b      	lsls	r3, r1, #2
 8003368:	4641      	mov	r1, r8
 800336a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800336e:	4641      	mov	r1, r8
 8003370:	008a      	lsls	r2, r1, #2
 8003372:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003376:	f7fc ff27 	bl	80001c8 <__aeabi_uldivmod>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4611      	mov	r1, r2
 8003380:	4b38      	ldr	r3, [pc, #224]	; (8003464 <UART_SetConfig+0x4e4>)
 8003382:	fba3 2301 	umull	r2, r3, r3, r1
 8003386:	095b      	lsrs	r3, r3, #5
 8003388:	2264      	movs	r2, #100	; 0x64
 800338a:	fb02 f303 	mul.w	r3, r2, r3
 800338e:	1acb      	subs	r3, r1, r3
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	3332      	adds	r3, #50	; 0x32
 8003394:	4a33      	ldr	r2, [pc, #204]	; (8003464 <UART_SetConfig+0x4e4>)
 8003396:	fba2 2303 	umull	r2, r3, r2, r3
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033a0:	441c      	add	r4, r3
 80033a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033a6:	2200      	movs	r2, #0
 80033a8:	673b      	str	r3, [r7, #112]	; 0x70
 80033aa:	677a      	str	r2, [r7, #116]	; 0x74
 80033ac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	1891      	adds	r1, r2, r2
 80033b6:	60b9      	str	r1, [r7, #8]
 80033b8:	415b      	adcs	r3, r3
 80033ba:	60fb      	str	r3, [r7, #12]
 80033bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80033c0:	4641      	mov	r1, r8
 80033c2:	1851      	adds	r1, r2, r1
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	4649      	mov	r1, r9
 80033c8:	414b      	adcs	r3, r1
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80033d8:	4659      	mov	r1, fp
 80033da:	00cb      	lsls	r3, r1, #3
 80033dc:	4651      	mov	r1, sl
 80033de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033e2:	4651      	mov	r1, sl
 80033e4:	00ca      	lsls	r2, r1, #3
 80033e6:	4610      	mov	r0, r2
 80033e8:	4619      	mov	r1, r3
 80033ea:	4603      	mov	r3, r0
 80033ec:	4642      	mov	r2, r8
 80033ee:	189b      	adds	r3, r3, r2
 80033f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80033f2:	464b      	mov	r3, r9
 80033f4:	460a      	mov	r2, r1
 80033f6:	eb42 0303 	adc.w	r3, r2, r3
 80033fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	663b      	str	r3, [r7, #96]	; 0x60
 8003406:	667a      	str	r2, [r7, #100]	; 0x64
 8003408:	f04f 0200 	mov.w	r2, #0
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003414:	4649      	mov	r1, r9
 8003416:	008b      	lsls	r3, r1, #2
 8003418:	4641      	mov	r1, r8
 800341a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800341e:	4641      	mov	r1, r8
 8003420:	008a      	lsls	r2, r1, #2
 8003422:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003426:	f7fc fecf 	bl	80001c8 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4b0d      	ldr	r3, [pc, #52]	; (8003464 <UART_SetConfig+0x4e4>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	2164      	movs	r1, #100	; 0x64
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	3332      	adds	r3, #50	; 0x32
 8003442:	4a08      	ldr	r2, [pc, #32]	; (8003464 <UART_SetConfig+0x4e4>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4422      	add	r2, r4
 8003456:	609a      	str	r2, [r3, #8]
}
 8003458:	bf00      	nop
 800345a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800345e:	46bd      	mov	sp, r7
 8003460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003464:	51eb851f 	.word	0x51eb851f

08003468 <memset>:
 8003468:	4402      	add	r2, r0
 800346a:	4603      	mov	r3, r0
 800346c:	4293      	cmp	r3, r2
 800346e:	d100      	bne.n	8003472 <memset+0xa>
 8003470:	4770      	bx	lr
 8003472:	f803 1b01 	strb.w	r1, [r3], #1
 8003476:	e7f9      	b.n	800346c <memset+0x4>

08003478 <__libc_init_array>:
 8003478:	b570      	push	{r4, r5, r6, lr}
 800347a:	4d0d      	ldr	r5, [pc, #52]	; (80034b0 <__libc_init_array+0x38>)
 800347c:	4c0d      	ldr	r4, [pc, #52]	; (80034b4 <__libc_init_array+0x3c>)
 800347e:	1b64      	subs	r4, r4, r5
 8003480:	10a4      	asrs	r4, r4, #2
 8003482:	2600      	movs	r6, #0
 8003484:	42a6      	cmp	r6, r4
 8003486:	d109      	bne.n	800349c <__libc_init_array+0x24>
 8003488:	4d0b      	ldr	r5, [pc, #44]	; (80034b8 <__libc_init_array+0x40>)
 800348a:	4c0c      	ldr	r4, [pc, #48]	; (80034bc <__libc_init_array+0x44>)
 800348c:	f000 f818 	bl	80034c0 <_init>
 8003490:	1b64      	subs	r4, r4, r5
 8003492:	10a4      	asrs	r4, r4, #2
 8003494:	2600      	movs	r6, #0
 8003496:	42a6      	cmp	r6, r4
 8003498:	d105      	bne.n	80034a6 <__libc_init_array+0x2e>
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	f855 3b04 	ldr.w	r3, [r5], #4
 80034a0:	4798      	blx	r3
 80034a2:	3601      	adds	r6, #1
 80034a4:	e7ee      	b.n	8003484 <__libc_init_array+0xc>
 80034a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80034aa:	4798      	blx	r3
 80034ac:	3601      	adds	r6, #1
 80034ae:	e7f2      	b.n	8003496 <__libc_init_array+0x1e>
 80034b0:	08003500 	.word	0x08003500
 80034b4:	08003500 	.word	0x08003500
 80034b8:	08003500 	.word	0x08003500
 80034bc:	08003504 	.word	0x08003504

080034c0 <_init>:
 80034c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034c2:	bf00      	nop
 80034c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034c6:	bc08      	pop	{r3}
 80034c8:	469e      	mov	lr, r3
 80034ca:	4770      	bx	lr

080034cc <_fini>:
 80034cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034ce:	bf00      	nop
 80034d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80034d2:	bc08      	pop	{r3}
 80034d4:	469e      	mov	lr, r3
 80034d6:	4770      	bx	lr
